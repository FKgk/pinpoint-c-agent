services:
  dev-mysql:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 'password'
      MYSQL_TCP_PORT: 3306
      MYSQL_USER: 'pinpoint'
      MYSQL_PASSWORD: 'password'
    ports:
      - '3306:3306'
    volumes:
      - ..:/workspace:cached
    deploy:
      resources:
        limits:
          cpus: "1"
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "-uroot",
          "-ppassword",
          "ping",
          "-h",
          "localhost"
        ]
      interval: 15s
      timeout: 10s
      retries: 10

  dev-mariadb:
    image: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: test
      MYSQL_TCP_PORT: 3307
      # MYSQL_USER: root
      # MYSQL_PASSWORD: password
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3307:3307"
    healthcheck:
      test:
        [
          "CMD",
          "healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized"
        ]
      start_period: 1m
      interval: 1m
      timeout: 5s
      retries: 3

  dev-mysql-setup:
    image: mysql:5.7
    depends_on:
      dev-mysql:
        condition: service_healthy
    volumes:
      - ..:/workspace:cached
    # todo load all data 
    entrypoint:
      [
        "bash",
        "-c",
        "cd /workspace/testapps/ && sh load_sample_db.sh"
      ]

  redis:
    image: redis:alpine
    command: redis-server --port 6379
    depends_on:
      dev-mysql-setup:
        condition: service_completed_successfully
    labels:
      - "name=redis"
      - "mode=standalone"
    ports:
      - 6389:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 1s
      retries: 1

  testapp-flask:
    container_name: flask
    depends_on:
      redis:
        condition: service_healthy
      dev-collector:
        condition: service_started
    restart: always
    build:
      dockerfile: testapps/flask.dockerfile
      context: ../
    ports:
      - 8184:80

    healthcheck:
      test: curl -f http://testapp-flask
      interval: 5s
      timeout: 1s

  testapp-php:
    container_name: yii2
    depends_on:
      redis:
        condition: service_healthy
      dev-collector:
        condition: service_started
    restart: always
    build:
      dockerfile: testapps/PHP/php.dockerfile
      context: ../
    ports:
      - 8185:80

    healthcheck:
      test: curl -f http://testapp-php
      interval: 5s
      timeout: 1s

  testapp-fastapi:
    container_name: fastapi
    depends_on:
      redis:
        condition: service_healthy
      dev-collector:
        condition: service_started

    restart: always
    build:
      dockerfile: testapps/fastapi.dockerfile
      context: ../
    ports:
      - 8186:8000
    healthcheck:
      test: curl -f http://testapp-fastapi:8000
      interval: 5s
      timeout: 1s

  # test call self
  backend:
    restart: always
    container_name: backend
    depends_on:
      redis:
        condition: service_healthy
    build:
      dockerfile: testapps/backend.dockerfile
      context: ../
    ports:
      - 8187:80

    healthcheck:
      test: curl -f http://backend
      interval: 5s
      timeout: 1s

  testapp-django:
    container_name: django
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      dev-collector:
        condition: service_started
    restart: always
    build:
      dockerfile: testapps/django.dockerfile
      context: ../
    ports:
      - 8188:8000
    healthcheck:
      test: curl -f http://testapp-django:8000/polls
      interval: 5s
      timeout: 1s

  httpbin:
    build:
      dockerfile: testapps/httpbin.dockerfile
      context: ../
    restart: always
    healthcheck:
      test: curl -f http://httpbin
      interval: 5s
      timeout: 10s
      retries: 50

  dev-collector:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ../collector-agent/

    environment:
      - PP_COLLECTOR_AGENT_SPAN_IP=dev-pinpoint
      - PP_COLLECTOR_AGENT_SPAN_PORT=9993
      - PP_COLLECTOR_AGENT_AGENT_IP=dev-pinpoint
      - PP_COLLECTOR_AGENT_AGENT_PORT=9991
      - PP_COLLECTOR_AGENT_STAT_IP=dev-pinpoint
      - PP_COLLECTOR_AGENT_STAT_PORT=9992
      - PP_COLLECTOR_AGENT_ISDOCKER=true
      - PP_Log_Level=DEBUG
      - PP_ADDRESS=0.0.0.0@10000
    ports:
      - 10000:10000
    volumes:
      - /etc/hosts:/etc/hosts

  mongodb:
    image: 'mongo'
    restart: always
    hostname: mongodb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    ports:
      - 27017:27017

  py3.9-plugins:
    build:
      dockerfile: testapps/python-plugins/py3.9-plugins.dockerfile
      context: ../
    profiles:
      - testing
    depends_on:
      redis:
        condition: service_healthy
      httpbin:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy

  py3.11-plugins:
    build:
      dockerfile: testapps/python-plugins/py3.11-plugins.dockerfile
      context: ../
    profiles:
      - testing
    depends_on:
      redis:
        condition: service_healthy
      httpbin:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy

  py-plugins:
    build:
      dockerfile: testapps/python-plugins/py-plugins.dockerfile
      context: ../
    profiles:
      - testing
    depends_on:
      redis:
        condition: service_healthy
      httpbin:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy

  grpc-py:
    container_name: grpc-py
    restart: always
    build:
      dockerfile: testapps/grpc_py.dockerfile
      context: ../
    ports:
      - 50050:50050
    depends_on:
      dev-collector:
        condition: service_started
      redis:
        condition: service_healthy

  grpc-py-client:
    container_name: grpc-py-client
    depends_on:
      grpc-py:
        condition: service_started
    restart: always
    build:
      dockerfile: testapps/grpc_py_client.dockerfile
      context: ../

  java-agent:
    container_name: spring
    build:
      dockerfile: testapps/java_call_app/spring.dockerfile
      context: ../
    ports:
      - 8085:8080
    restart: always
    volumes:
      - /etc/hosts:/etc/hosts

  simple-php:
    container_name: simple-php
    depends_on:
      dev-mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      dev-mariadb:
        condition: service_healthy
      memcached:
        condition: service_healthy
      dev-collector:
        condition: service_started

    restart: always
    build:
      dockerfile: testapps/SimplePHP/simplephp.dockerfile
      context: ../

  postgres:
    image: postgres:14-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=pinpoint
      - POSTGRES_USER=test
      - POSTGRES_DB=test
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 80s

  php-compatible:
    build:
      dockerfile: testapps/php_compatible.dockerfile
      context: ../
      args:
        - PHP_VERSION=${PHP_VERSION}
    depends_on:
      dev-mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      dev-mariadb:
        condition: service_healthy

  memcached:
    image: memcached:alpine3.20
    ports:
      - "11211:11211"
    restart: always
    healthcheck:
      test: [ "CMD", "nc", "-z", "127.0.0.1", "11211" ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 80s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 50M

  php-wordpress:
    build:
      dockerfile: testapps/php_wordpress/php-wordpress.dockerfile
      context: ../
    ports:
      - "8080:80"
    cap_add:
      - SYS_PTRACE
    depends_on:
      dev-mysql:
        condition: service_healthy
      dev-collector:
        condition: service_started
    healthcheck:
      test: curl -f http://localhost:80
      interval: 5s
      timeout: 1s

  phpmyadmin:
    build:
      dockerfile: testapps/php_phpmyadmin/phpmyadmin.dockerfile
      context: ../
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=dev-mysql
      - PMA_USER=root
      - PMA_PASSWORD=password
    ports:
      - "8081:80"
    cap_add:
      - SYS_PTRACE
    depends_on:
      dev-mysql:
        condition: service_healthy
      dev-collector:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2"
    healthcheck:
      test: curl -f http://localhost:80
      interval: 5s
      timeout: 1s

  cg_phpmyadmin:
    image: phpmyadmin:apache
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=dev-mysql
      - PMA_USER=root
      - PMA_PASSWORD=password
    ports:
      - "8082:80"
    cap_add:
      - SYS_PTRACE
    depends_on:
      dev-mysql:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "2"

  flarum:
    # image: 
    build:
      dockerfile: testapps/flarum/flarum.dockerfile
      context: ../
    container_name: flarum
    env_file:
      - ./flarum/flarum.env
    ports:
      - 8888:8888
    depends_on:
      dev-mysql:
        condition: service_healthy
      dev-collector:
        condition: service_started

  cachet:
    build:
      dockerfile: testapps/cachethq/cachethq.dockerfile
      context: ../
    ports:
      - 8000:8000
    environment:
      - DB_DRIVER=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - CACHE_DRIVER=redis
      - DB_DATABASE=test
      - DB_USERNAME=test
      - DB_PASSWORD=pinpoint
      - DB_PREFIX=chq_
      - APP_KEY=${APP_KEY:-null}
      - APP_LOG=errorlog
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=true
      - REDIS_HOST=redis
      - REDIS_DATABASE=0
      - REDIS_PORT=6379
      - DEBUG=true
      - APP_KEY=base64:JlA4Fr6ysePTdzUyqGEmPXxknANEIfOF7M2krYh8wgM=
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      dev-collector:
        condition: service_started
    restart: on-failure
  shopware-php:
    build:
      dockerfile: testapps/shopware/shopware.dockerfile
      context: ../
    environment:
      APP_SECRET: 440dec3766de53010c5ccf6231c182acfc90bd25cff82e771245f736fd276518
      INSTANCE_ID: 10612e3916e153dd3447850e944a03fabe89440970295447a30a75b151bd844e
      APP_URL: http://localhost:8200
      BLUE_GREEN_DEPLOYMENT: 0
      DATABASE_HOST: dev-mysql
      DATABASE_URL: mysql://root:password@dev-mysql:3306/shopware
      CACHE_ADAPTER: redis
      REDIS_CACHE_HOST: redis
      REDIS_CACHE_PORT: 6379
      REDIS_CACHE_DATABASE: 3
      REDIS_SESSION_HOST: redis
      REDIS_SESSION_PORT: 6379
      REDIS_SESSION_DATABASE: 3
      APP_ENV: dev
    ports:
      - 8200:80
    depends_on:
      redis:
        condition: service_healthy
      dev-collector:
        condition: service_started
      dev-mysql-setup:
        condition: service_completed_successfully


  thinkphp8:
    build:
      dockerfile: testapps/thinkphp-php/thinkphp.dockerfile
      context: ../
    ports:
      - 8201:8000
    depends_on:
      redis:
        condition: service_healthy
      dev-collector:
        condition: service_started
      dev-mysql-setup:
        condition: service_completed_successfully
    healthcheck:
      test: curl -f http://thinkphp8:8000/test_db
      interval: 5s
      timeout: 1s

  laravel:
    build:
      dockerfile: testapps/laravel/dockerfile
      context: ../
    ports:
      - 8202:8000
    depends_on:
      # redis:
      # condition: service_healthy
      dev-collector:
        condition: service_started
        # dev-mysql-setup:
        # condition: service_completed_successfully
    healthcheck:
      test: curl -f http://localhost:8000/
      interval: 5s
      timeout: 1s
